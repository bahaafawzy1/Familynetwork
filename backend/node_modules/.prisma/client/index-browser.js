
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  email: 'email',
  phoneE164: 'phoneE164',
  countryCode: 'countryCode',
  isEmailVerified: 'isEmailVerified',
  isPhoneVerified: 'isPhoneVerified',
  role: 'role',
  status: 'status',
  passwordHash: 'passwordHash',
  lastLoginAt: 'lastLoginAt'
};

exports.Prisma.FamilyProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  displayName: 'displayName',
  address: 'address',
  city: 'city',
  preferredLanguage: 'preferredLanguage'
};

exports.Prisma.FamilyMemberScalarFieldEnum = {
  id: 'id',
  familyId: 'familyId',
  fullName: 'fullName',
  relation: 'relation',
  birthDate: 'birthDate',
  notes: 'notes'
};

exports.Prisma.CaregiverProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  fullName: 'fullName',
  gender: 'gender',
  languages: 'languages',
  specialties: 'specialties',
  certifications: 'certifications',
  hourlyRateEgp: 'hourlyRateEgp',
  bio: 'bio',
  city: 'city',
  availabilityJson: 'availabilityJson',
  verificationStatus: 'verificationStatus',
  ratingAvg: 'ratingAvg',
  ratingCount: 'ratingCount'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  caregiverId: 'caregiverId',
  type: 'type',
  url: 'url',
  ocrText: 'ocrText',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.OtpCodeScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt',
  channel: 'channel',
  destination: 'destination',
  codeHash: 'codeHash',
  consumedAt: 'consumedAt',
  purpose: 'purpose',
  attempts: 'attempts'
};

exports.Prisma.BookingScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  familyId: 'familyId',
  caregiverId: 'caregiverId',
  startTime: 'startTime',
  endTime: 'endTime',
  type: 'type',
  status: 'status',
  notes: 'notes',
  priceEgp: 'priceEgp'
};

exports.Prisma.RatingScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  familyId: 'familyId',
  caregiverId: 'caregiverId',
  bookingId: 'bookingId',
  score: 'score',
  comment: 'comment'
};

exports.Prisma.CareLogScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  bookingId: 'bookingId',
  caregiverId: 'caregiverId',
  familyId: 'familyId',
  meals: 'meals',
  medication: 'medication',
  mood: 'mood',
  photos: 'photos',
  notes: 'notes'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  bookingId: 'bookingId',
  familyId: 'familyId',
  caregiverId: 'caregiverId',
  senderRole: 'senderRole',
  text: 'text',
  mediaUrl: 'mediaUrl'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  familyId: 'familyId',
  status: 'status',
  plan: 'plan',
  nextBillingAt: 'nextBillingAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  familyId: 'familyId',
  bookingId: 'bookingId',
  provider: 'provider',
  amountEgp: 'amountEgp',
  currency: 'currency',
  status: 'status',
  providerRef: 'providerRef'
};

exports.Prisma.PayoutScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  caregiverId: 'caregiverId',
  amountEgp: 'amountEgp',
  status: 'status',
  approvedBy: 'approvedBy'
};

exports.Prisma.SupportTicketScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  openedByUserId: 'openedByUserId',
  assignedAdminId: 'assignedAdminId',
  subject: 'subject',
  description: 'description',
  status: 'status',
  priority: 'priority',
  tags: 'tags'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  FamilyProfile: 'FamilyProfile',
  FamilyMember: 'FamilyMember',
  CaregiverProfile: 'CaregiverProfile',
  Document: 'Document',
  OtpCode: 'OtpCode',
  Booking: 'Booking',
  Rating: 'Rating',
  CareLog: 'CareLog',
  Message: 'Message',
  Subscription: 'Subscription',
  Payment: 'Payment',
  Payout: 'Payout',
  SupportTicket: 'SupportTicket'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
