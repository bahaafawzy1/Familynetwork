// datasource and generator
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Roles in the system
enum Role {
  FAMILY
  CAREGIVER
  ADMIN
}

model User {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  email           String?  @unique
  phoneE164       String?  @unique
  countryCode     String? // e.g. EG
  isEmailVerified Boolean  @default(false)
  isPhoneVerified Boolean  @default(false)
  role            Role
  status          String   @default("ACTIVE") // ACTIVE, SUSPENDED, PENDING_VERIFICATION

  // Authentication
  passwordHash String? // only for admins

  // Relationships
  familyProfile    FamilyProfile?
  caregiverProfile CaregiverProfile?

  // Audit
  lastLoginAt DateTime?

  @@index([role, status])
}

model FamilyProfile {
  id                String         @id @default(cuid())
  user              User           @relation(fields: [userId], references: [id])
  userId            String         @unique
  displayName       String
  address           String?
  city              String?
  preferredLanguage String? // ar, en
  members           FamilyMember[]
}

model FamilyMember {
  id        String        @id @default(cuid())
  family    FamilyProfile @relation(fields: [familyId], references: [id])
  familyId  String
  fullName  String
  relation  String // parent, child, elder
  birthDate DateTime?
  notes     String?
}

model CaregiverProfile {
  id                 String     @id @default(cuid())
  user               User       @relation(fields: [userId], references: [id])
  userId             String     @unique
  fullName           String
  gender             String?
  languages          String[]
  specialties        String[] // childcare, eldercare
  certifications     String[]
  hourlyRateEgp      Int?
  bio                String?
  city               String?
  availabilityJson   String? // basic JSON for MVP
  verificationStatus String     @default("PENDING") // PENDING, VERIFIED, REJECTED
  documents          Document[]
  ratingAvg          Float      @default(0)
  ratingCount        Int        @default(0)
}

model Document {
  id          String           @id @default(cuid())
  caregiver   CaregiverProfile @relation(fields: [caregiverId], references: [id])
  caregiverId String
  type        String // ID, POLICE_CLEARANCE, HEALTH_CERT
  url         String
  ocrText     String?
  status      String           @default("PENDING") // PENDING, APPROVED, REJECTED
  createdAt   DateTime         @default(now())
}

model OtpCode {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  expiresAt   DateTime
  channel     String // sms, whatsapp, email
  destination String // phone in E.164 or email
  codeHash    String
  consumedAt  DateTime?
  purpose     String // login, verify_phone, verify_email
  attempts    Int       @default(0)

  @@index([destination, purpose])
  @@index([expiresAt])
}
