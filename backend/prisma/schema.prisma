// datasource and generator
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Note: SQLite connector does not support Prisma enums; using String for role

model User {
  id            String        @id @default(cuid())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  email         String?       @unique
  phoneE164     String?       @unique
  countryCode   String?       // e.g. EG
  isEmailVerified Boolean     @default(false)
  isPhoneVerified Boolean     @default(false)
  role          String        @default("FAMILY") // FAMILY, CAREGIVER, ADMIN
  status        String        @default("ACTIVE") // ACTIVE, SUSPENDED, PENDING_VERIFICATION

  // Authentication
  passwordHash  String?       // only for admins

  // Relationships
  familyProfile    FamilyProfile?
  caregiverProfile CaregiverProfile?

  // Audit
  lastLoginAt   DateTime?

  @@index([role, status])
}

model FamilyProfile {
  id           String        @id @default(cuid())
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @unique
  displayName  String
  address      String?
  city         String?
  preferredLanguage String?   // ar, en
  members      FamilyMember[]
  bookings     Booking[]
  ratings      Rating[]
}

model FamilyMember {
  id           String   @id @default(cuid())
  family       FamilyProfile @relation(fields: [familyId], references: [id])
  familyId     String
  fullName     String
  relation     String       // parent, child, elder
  birthDate    DateTime?
  notes        String?
}

model CaregiverProfile {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @unique
  fullName     String
  gender       String?
  languages    String    // JSON text (array of strings)
  specialties  String    // JSON text (array of strings)
  certifications String  // JSON text (array of strings)
  hourlyRateEgp Int?
  bio          String?
  city         String?
  availabilityJson String? // basic JSON for MVP
  verificationStatus String @default("PENDING") // PENDING, VERIFIED, REJECTED
  documents    Document[]
  ratingAvg    Float      @default(0)
  ratingCount  Int        @default(0)
  bookings     Booking[]
  ratings      Rating[]
}

model Document {
  id           String   @id @default(cuid())
  caregiver    CaregiverProfile @relation(fields: [caregiverId], references: [id])
  caregiverId  String
  type         String   // ID, POLICE_CLEARANCE, HEALTH_CERT
  url          String
  ocrText      String?
  status       String   @default("PENDING") // PENDING, APPROVED, REJECTED
  createdAt    DateTime @default(now())
}

model OtpCode {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  channel      String   // sms, whatsapp, email
  destination  String   // phone in E.164 or email
  codeHash     String
  consumedAt   DateTime?
  purpose      String   // login, verify_phone, verify_email
  attempts     Int      @default(0)

  @@index([destination, purpose])
  @@index([expiresAt])
}

model Booking {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  familyId       String
  caregiverId    String
  startTime      DateTime
  endTime        DateTime
  type           String   // HOURLY or SHIFT
  status         String   @default("PENDING") // PENDING, ACCEPTED, DECLINED, CANCELED, COMPLETED, RESCHEDULED
  notes          String?
  priceEgp       Int?

  family         FamilyProfile   @relation(fields: [familyId], references: [id])
  caregiver      CaregiverProfile @relation(fields: [caregiverId], references: [id])
}

model Rating {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  familyId     String
  caregiverId  String
  bookingId    String
  score        Int      // 1..5
  comment      String?

  family       FamilyProfile   @relation(fields: [familyId], references: [id])
  caregiver    CaregiverProfile @relation(fields: [caregiverId], references: [id])
}