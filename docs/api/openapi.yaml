openapi: 3.0.3
info:
  title: Family Care Network API
  version: 0.1.0
servers:
  - url: http://localhost:4000
paths:
  /health:
    get:
      summary: Health check
      responses:
        '200': { description: OK }
  /auth/request-otp:
    post:
      summary: Request OTP via SMS or Email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phoneE164: { type: string }
                email: { type: string, format: email }
                purpose: { type: string, enum: [login, verify_phone, verify_email] }
      responses:
        '200': { description: OTP dispatched }
  /auth/verify-otp:
    post:
      summary: Verify OTP and login/signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phoneE164: { type: string }
                email: { type: string, format: email }
                code: { type: string }
                role: { type: string, enum: [FAMILY, CAREGIVER, ADMIN] }
      responses:
        '200':
          description: JWT token and user
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
                  user:
                    type: object
                    properties:
                      id: { type: string }
                      role: { type: string }
                      email: { type: string }
                      phoneE164: { type: string }
  /me:
    get:
      summary: Get current user with profile
      security: [ { bearerAuth: [] } ]
      responses:
        '200': { description: User object }
  /me/family:
    put:
      summary: Create/update family profile and members
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                displayName: { type: string }
                address: { type: string }
                city: { type: string }
                preferredLanguage: { type: string }
                members:
                  type: array
                  items:
                    type: object
                    properties:
                      fullName: { type: string }
                      relation: { type: string }
                      birthDate: { type: string }
                      notes: { type: string }
      responses:
        '200': { description: Family profile }
  /me/caregiver:
    put:
      summary: Create/update caregiver profile
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName: { type: string }
                gender: { type: string }
                languages: { type: array, items: { type: string } }
                specialties: { type: array, items: { type: string } }
                certifications: { type: array, items: { type: string } }
                hourlyRateEgp: { type: integer }
                bio: { type: string }
                city: { type: string }
                availabilityJson: { type: string }
      responses:
        '200': { description: Caregiver profile }
  /caregivers:
    get:
      summary: Search caregivers
      parameters:
        - in: query
          name: q
          schema: { type: string }
        - in: query
          name: city
          schema: { type: string }
        - in: query
          name: language
          schema: { type: string }
        - in: query
          name: specialty
          schema: { type: string }
        - in: query
          name: minRate
          schema: { type: integer }
        - in: query
          name: maxRate
          schema: { type: integer }
        - in: query
          name: page
          schema: { type: integer }
        - in: query
          name: pageSize
          schema: { type: integer }
      responses:
        '200': { description: List of caregivers }

  /bookings:
    post:
      summary: Create a booking (family)
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                caregiverId: { type: string }
                startTime: { type: string }
                endTime: { type: string }
                type: { type: string, enum: [HOURLY, SHIFT] }
                notes: { type: string }
                priceEgp: { type: integer }
      responses:
        '200': { description: Booking created }

  /bookings/{id}/accept:
    post:
      summary: Accept booking (caregiver)
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: Booking accepted }

  /bookings/{id}/decline:
    post:
      summary: Decline booking (caregiver)
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: Booking declined }

  /bookings/{id}/cancel:
    post:
      summary: Cancel booking (family or caregiver)
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: Booking canceled }

  /bookings/{id}/reschedule:
    post:
      summary: Reschedule booking (family or caregiver)
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                startTime: { type: string }
                endTime: { type: string }
      responses:
        '200': { description: Booking rescheduled }
  /carelogs:
    post:
      summary: Submit care log (caregiver)
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bookingId: { type: string }
                meals: { type: object }
                medication: { type: object }
                mood: { type: string }
                photos: { type: array, items: { type: string } }
                notes: { type: string }
      responses:
        '200': { description: Care log created }
  /carelogs/booking/{id}:
    get:
      summary: List care logs by booking (family or caregiver)
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: Care logs }

  /payments/start:
    post:
      summary: Start a payment (family)
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                provider: { type: string, enum: [PAYMOB, FAWRY] }
                amountEgp: { type: integer }
                bookingId: { type: string }
      responses:
        '200': { description: Payment initiated }

  /payments/webhook:
    post:
      summary: Payment provider webhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                provider: { type: string }
                ref: { type: string }
                status: { type: string }
      responses:
        '200': { description: OK }

  /support:
    get:
      summary: List support tickets (admin sees all; others see own)
      security: [ { bearerAuth: [] } ]
      responses:
        '200': { description: Tickets }
    post:
      summary: Create support ticket
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                subject: { type: string }
                description: { type: string }
                priority: { type: string, enum: [LOW, NORMAL, HIGH] }
                tags: { type: array, items: { type: string } }
      responses:
        '200': { description: Ticket created }

  /verification/document/status:
    post:
      summary: Admin sets document status
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                documentId: { type: string }
                status: { type: string, enum: [PENDING, APPROVED, REJECTED] }
      responses:
        '200': { description: Updated }

  /verification/face/compare:
    post:
      summary: Admin triggers face compare (stub)
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                caregiverUserId: { type: string }
                idImageUrl: { type: string }
                selfieUrl: { type: string }
      responses:
        '200': { description: Verified }
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT